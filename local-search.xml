<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>『模组开发日记』之霜冻</title>
    <link href="/2025/09/14/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%9C%9C%E5%86%BB/"/>
    <url>/2025/09/14/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%9C%9C%E5%86%BB/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="霜冻"><span style="color: cadetblue;">霜冻</span></span></h1><hr><p>霜冻作为寒冰剑的特殊攻击效果</p><p>在玩家使用寒冰剑攻击生物时会对其施加霜冻效果</p><h2 style="color: #b7a0e0"><span id="霜冻效果">霜冻效果</span></h2><img src="/img/霜冻.png" srcset="/img/loading_1.gif" lazyload alt="霜冻"><hr><p>霜冻效果持续10秒</p><p>玩家或生物被施加上霜冻之后会减少当前20%的移动速度</p><p>在霜冻效果持续期间玩家或生物每三秒会扣除1点生命值</p><p>霜冻效果无法叠加</p><hr><h2 style="color: #b7a0e0"><span id="代码演示">代码演示</span></h2><p>下面是关于霜冻效果的实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//霜冻效果</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FrostEffect</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">StatusEffect</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DAMAGE_INTERVAL_TICKS</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>; <span class="hljs-comment">// 每3秒扣一次血</span><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">FrostEffect</span><span class="hljs-params">(StatusEffectCategory category, <span class="hljs-type">int</span> color)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(category, color);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canApplyUpdateEffect</span><span class="hljs-params">(<span class="hljs-type">int</span> duration, <span class="hljs-type">int</span> amplifier)</span><br>    &#123;<br>        <span class="hljs-comment">// 每 tick 都会调用 applyUpdateEffect</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyUpdateEffect</span><span class="hljs-params">(LivingEntity entity, <span class="hljs-type">int</span> amplifier)</span><br>    &#123;<br>        <span class="hljs-type">World</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> entity.getWorld();<br>        <span class="hljs-comment">// 每3秒扣一次血</span><br>        <span class="hljs-type">StatusEffectInstance</span> <span class="hljs-variable">effect</span> <span class="hljs-operator">=</span> entity.getStatusEffect(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span> (effect != <span class="hljs-literal">null</span> &amp;&amp; effect.getDuration() % DAMAGE_INTERVAL_TICKS == <span class="hljs-number">0</span>)<br>        &#123;<br>            entity.damage(entity.getDamageSources().magic(), <span class="hljs-number">2.0f</span> + amplifier);<br>        &#125;<br><br>        <span class="hljs-comment">// 减速效果</span><br>        <span class="hljs-comment">//让实体在移动时受到阻力：</span><br>        <span class="hljs-comment">//X/Z 方向速度乘以 1.5f。</span><br>        <span class="hljs-comment">//Y 方向乘以 5（跳跃或下落时更慢/更快，取决于数值）。</span><br>        <span class="hljs-comment">//entity.slowMovement(state, new Vec3d(1.5f, 5.0f, 1.5f));//这里是仿照掉入细雪中的效果，因为其会限制玩家的跳跃所以弃用</span><br>        <span class="hljs-comment">//减20%移动速度</span><br>        <span class="hljs-built_in">this</span>.addAttributeModifier(<br>                EntityAttributes.GENERIC_MOVEMENT_SPEED,<br>                <span class="hljs-string">&quot;662A6B8D-DA3E-4C1C-8813-96EA6097278D&quot;</span>,<span class="hljs-comment">//唯一标识码uuid</span><br>                -<span class="hljs-number">0.20f</span> * (amplifier + <span class="hljs-number">1</span>),<br>                EntityAttributeModifier.Operation.MULTIPLY_TOTAL<br>        );<br><br><br>        <span class="hljs-comment">// 粒子效果（客户端）</span><br>        <span class="hljs-keyword">if</span> (world.isClient)<br>        &#123;<br>            <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> world.getRandom();<br>            <span class="hljs-comment">// 提高出现概率</span><br>            <span class="hljs-keyword">if</span> (random.nextFloat() &lt; <span class="hljs-number">0.3f</span>)<br>            &#123;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">px</span> <span class="hljs-operator">=</span> entity.getX();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">py</span> <span class="hljs-operator">=</span> entity.getY() + entity.getHeight() * <span class="hljs-number">0.5</span>; <span class="hljs-comment">//实体中部</span><br>                <span class="hljs-type">double</span> <span class="hljs-variable">pz</span> <span class="hljs-operator">=</span> entity.getZ();<br>                <span class="hljs-type">double</span> <span class="hljs-variable">vx</span> <span class="hljs-operator">=</span> MathHelper.nextBetween(random, -<span class="hljs-number">0.05f</span>, <span class="hljs-number">0.05f</span>);<br>                <span class="hljs-type">double</span> <span class="hljs-variable">vy</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.05f</span>;<br>                <span class="hljs-type">double</span> <span class="hljs-variable">vz</span> <span class="hljs-operator">=</span> MathHelper.nextBetween(random, -<span class="hljs-number">0.05f</span>, <span class="hljs-number">0.05f</span>);<br><br>                world.addParticle(ParticleTypes.SNOWFLAKE, px, py, pz, vx, vy, vz);<br>            &#125;<br>        &#125;<br><br>        entity.setInPowderSnow(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//遇到火焰去除效果</span><br>        <span class="hljs-keyword">if</span> (!world.isClient &amp;&amp; entity.isOnFire()) &#123;<br>            entity.setOnFire(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p align="center" style="color: hotpink;font-size: 20px"><strong>以上代码用于 Fabric-1.20 版本模组开发</strong></p><p align="center" style="color: hotpink;font-size: 20px"><strong>仅供参考，若想摘抄请在下方留言</strong></p><hr><hr><h2 style="color: #b7a0e0"><span id="后记">后记</span></h2><p>青金铜套装的效果</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2025 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之寒冰剑</title>
    <link href="/2025/09/14/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E5%AF%92%E5%86%B0%E5%89%91/"/>
    <url>/2025/09/14/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E5%AF%92%E5%86%B0%E5%89%91/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="寒冰剑强大的武器"><span style="color: cadetblue;">寒冰剑（强大的武器）</span></span></h1><hr><p>在到后期有了暗晶剑后，我们还有通过对暗晶剑进行升级来得到寒冰剑</p><h2 style="color: #b7a0e0"><span id="寒冰剑的合成">寒冰剑的合成</span></h2><p>寒冰剑通过使用一个下界之星和两个冰晶合成</p><img src="/img/寒冰剑的合成.png" srcset="/img/loading_1.gif" lazyload alt="寒冰剑的合成"><hr><p>冰晶则需要通过四块蓝冰，四颗钻石，和一块紫水晶碎片来合成</p><img src="/img/冰晶的合成.png" srcset="/img/loading_1.gif" lazyload alt="冰晶的合成"><h2 style="color: #b7a0e0"><span id="寒冰剑的功能">寒冰剑的功能</span></h2><p>寒冰剑继承了暗晶剑的吸血功能并且在攻击生物是会对生物施加霜冻效果</p><img src="/img/霜冻.png" srcset="/img/loading_1.gif" lazyload alt="霜冻"><hr><p>每施加一次霜冻效果会有两秒的冷却时间</p><a href="https://hgt12.github.io/2025/09/14/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%9C%9C%E5%86%BB/">了解霜冻机制请点这里</a><p>寒冰剑相比暗晶剑还有一点伤害提升</p><p>可以说是后期神器了</p><hr><h2 style="color: #b7a0e0"><span id="代码演示">代码演示</span></h2><p>下面是寒冰剑的具体实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//寒冰剑</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IceSwordItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SwordItem</span><br>&#123;<br>    <span class="hljs-comment">//增加冷却时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastHealTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//上次回复生命的时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">HEAL_COOLDOWN</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>; <span class="hljs-comment">//2秒冷却，单位是毫秒</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">enemyHitCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录击中的敌人数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COOLDOWN_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>; <span class="hljs-comment">//设置物品冷却时间，单位是tick（1秒=20tick）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IceSwordItem</span><span class="hljs-params">(ToolMaterial toolMaterial, <span class="hljs-type">int</span> attackDamage, <span class="hljs-type">float</span> attackSpeed, Settings settings)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(toolMaterial, attackDamage, attackSpeed, settings);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">postHit</span><span class="hljs-params">(ItemStack stack, LivingEntity target, LivingEntity attacker)</span><br>    &#123;<br>        <span class="hljs-comment">//可以在if语句块里引用PlayerEntity user</span><br>        <span class="hljs-keyword">if</span> (attacker <span class="hljs-keyword">instanceof</span> PlayerEntity user)<br>        &#123;<br>            <span class="hljs-comment">//检查冷却时间</span><br>            <span class="hljs-keyword">if</span> (user.getItemCooldownManager().isCoolingDown(stack.getItem()))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//如果正在冷却，直接返回</span><br>            &#125;<br><br>            stack.damage(<span class="hljs-number">1</span>, attacker, e -&gt; e.sendEquipmentBreakStatus(EquipmentSlot.MAINHAND));<br>            enemyHitCount++; <span class="hljs-comment">//每次击中敌人时增加计数</span><br><br>            <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>            <span class="hljs-comment">//用寒冰剑打中人之后会给对方施加霜冻效果</span><br>            target.addStatusEffect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StatusEffectInstance</span>(ModStatusEffects.FROST, <span class="hljs-number">200</span>, <span class="hljs-number">0</span>)); <span class="hljs-comment">// 10秒霜冻</span><br><br>            <span class="hljs-comment">//检查冷却时间</span><br>            <span class="hljs-keyword">if</span> (currentTime - lastHealTime &gt;= HEAL_COOLDOWN)<br>            &#123;<br>                healMultipleFromEnemies(attacker, enemyHitCount);<br>                lastHealTime = currentTime; <span class="hljs-comment">//更新最后一次回复生命的时间</span><br>                enemyHitCount = <span class="hljs-number">0</span>; <span class="hljs-comment">//重置敌人数量计数</span><br>            &#125;<br><br>            <span class="hljs-comment">//设置物品冷却(用物品冷却管理器来设置)</span><br>            user.getItemCooldownManager().set(stack.getItem(), COOLDOWN_TIME);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//用于实现多次攻击回复生命值的逻辑</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">healMultipleFromEnemies</span><span class="hljs-params">(LivingEntity attacker, <span class="hljs-type">int</span> enemyCount)</span><br>    &#123;<br>        <span class="hljs-comment">//每个敌人回复1点生命值</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">healAmount</span> <span class="hljs-operator">=</span> Math.min(enemyCount * <span class="hljs-number">2</span>, <span class="hljs-number">20</span> - attacker.getHealth()); <span class="hljs-comment">//确保不超过最大生命值</span><br>        attacker.heal(healAmount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p align="center" style="color: hotpink;font-size: 20px"><strong>以上代码用于 Fabric-1.20 版本模组开发</strong></p><p align="center" style="color: hotpink;font-size: 20px"><strong>仅供参考，若想摘抄请在下方留言</strong></p><hr><hr><h2 style="color: #b7a0e0"><span id="后记">后记</span></h2><p>霜冻效果</p><p>青金铜套装的效果</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2025 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之修复在游戏中合成物品无法在配方书中解锁配方的bug</title>
    <link href="/2025/09/14/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E4%BF%AE%E5%A4%8D%E5%9C%A8%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%90%88%E6%88%90%E7%89%A9%E5%93%81%E6%97%A0%E6%B3%95%E5%9C%A8%E9%85%8D%E6%96%B9%E4%B9%A6%E4%B8%AD%E8%A7%A3%E9%94%81%E9%85%8D%E6%96%B9%E7%9A%84bug/"/>
    <url>/2025/09/14/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E4%BF%AE%E5%A4%8D%E5%9C%A8%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%90%88%E6%88%90%E7%89%A9%E5%93%81%E6%97%A0%E6%B3%95%E5%9C%A8%E9%85%8D%E6%96%B9%E4%B9%A6%E4%B8%AD%E8%A7%A3%E9%94%81%E9%85%8D%E6%96%B9%E7%9A%84bug/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="关于如何解决游戏中配方书解锁的问题">关于如何解决游戏中配方书解锁的问题</span></h1><br><h2 style="color: #b7a0e0"><span id="发现问题">发现问题</span></h2><p>由于在模组开发过程中遇到在配方书中无法解锁配方的问题</p><img src="/img/配方书无法解锁.png" srcset="/img/loading_1.gif" lazyload alt><h2 style="color: #b7a0e0"><span id="寻找解决办法">寻找解决办法</span></h2><p>但是在我测试很多次之后还是找不到解决办法</p><p>最终在群友的点拨下终于知道是怎么回事了</p><h2 style="color: #b7a0e0"><span id="问题解决过程">问题解决过程</span></h2><p>问题出在配方编写的程序中，因为我使用的是自动数据生成（这样比较方便不用自己手搓json）</p><p>在我原本的配方编写中是这样的</p><img src="/img/原本的配方生成程序.png" srcset="/img/loading_1.gif" lazyload alt><p>这样写导致数据生成的时候json文件中的recipe和recipes中的id显示是minecraft</p><img src="/img/原本的配方json.png" srcset="/img/loading_1.gif" lazyload alt><p>这就是导致配方书中无法解锁我的模组配方的罪魁祸首</p><hr><p>然后在我问问题过程中有人说我这个Identifier里都都没有namespace</p><p>后来我翻了一下源码之后发现</p><p>原来在下面的offerTo方法里的Identifier有俩构造方法，一个是没指定namespace，那生成的json文件中的recipe和recipes就是默认minecraft，所以指定namespace就是行了，namespace就是mod_id</p><img src="/img/修改后的配方生成程序.png" srcset="/img/loading_1.gif" lazyload alt><hr><p>修改之后问题完美解决，游戏中拾取模组物品也会解锁相应配方了</p><img src="/img/后来的配方json.png" srcset="/img/loading_1.gif" lazyload alt><hr><h2 style="color: #b7a0e0"><span id="后续代码优化">后续代码优化</span></h2><p>但有一些配方不是像上面那样工作台合成的，比如熔炉，或者是九合一配方</p><p>这些配方原版是通过自定义了特殊的方法来给熔炉这些特殊配方</p><p>解决办法也很简单，只要重写原版的方法然后修改其Identifier中的namespace为自己的模组id再调用重写的方法就行了（下面以九合一的配方示例）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//9&gt;1</span><br>        ShapedRecipeJsonBuilder.create(compactingCategory, compactItem)<br>                .input(Character.valueOf(<span class="hljs-string">&#x27;#&#x27;</span>), baseItem)<br>                .pattern(<span class="hljs-string">&quot;###&quot;</span>)<br>                .pattern(<span class="hljs-string">&quot;###&quot;</span>)<br>                .pattern(<span class="hljs-string">&quot;###&quot;</span>)<br>                .group(compactingGroup)<br>                .criterion(RecipeProvider.hasItem(baseItem), RecipeProvider.conditionsFromItem(baseItem))<br>                .offerTo(exporter, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(<span class="hljs-string">&quot;test-mod&quot;</span>, compactingId));<br></code></pre></td></tr></table></figure><p>这样再调用该方法就可以生成正确的json文件了</p><hr><h2 style="color: #b7a0e0"><span id="后记">后记</span></h2><p>其实自己后面想想这个问题其实也不是很难，就没看懂Identifier中的两个构造方法的含义是什么</p><p>也是被自己蠢到了</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2025 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之芦荻花加入世界</title>
    <link href="/2024/12/23/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E8%8A%A6%E8%8D%BB%E8%8A%B1%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/12/23/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E8%8A%A6%E8%8D%BB%E8%8A%B1%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="芦荻花加入世界"><span style="color: cadetblue;">芦荻花加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="芦荻花">芦荻花</span></h2><p>灵感来源于作者家乡大片的芦荻花草原</p><p>游戏中的芦荻花分为高芦荻花和芦荻花两种</p><img src="/img/芦荻花.png" srcset="/img/loading_1.gif" lazyload alt="芦荻花"><br><p>芦荻花会随机分布在世界的一些地方</p><p>也会单独生成一片芦荻花田，通常伴随着沼泽地形一起生成</p><br><p>芦荻花群系</p><img src="/img/芦荻花群系.png" srcset="/img/loading_1.gif" lazyload alt="芦荻花群系"><br><p>灰常好看哇有没有</p><br><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>后续将会开发果园群系</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之橘子灌木丛加入世界</title>
    <link href="/2024/12/13/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%A9%98%E5%AD%90%E7%81%8C%E6%9C%A8%E4%B8%9B%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/12/13/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%A9%98%E5%AD%90%E7%81%8C%E6%9C%A8%E4%B8%9B%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="橘子灌木丛加入世界"><span style="color: cadetblue;">橘子灌木丛加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="橘子">橘子</span></h2><p>模组中的水果之一，可以从橘子灌木丛上采摘得到</p><p>橘子灌木丛</p><img src="/img/橘子灌木丛.png" srcset="/img/loading_1.gif" lazyload alt="橘子灌木丛"><br><p>橘子灌木丛会自然生成在游戏里的平原，向日葵平原，草甸和稀疏丛林群系中</p><br><p>下面是一些有关橘子灌木丛相关物品的展示</p><img src="/img/橘子灌木丛物品展示.png" srcset="/img/loading_1.gif" lazyload alt="橘子灌木丛物品展示"><br><p>玩家每食用一个橘子会恢复3点饥饿值和1点饱食度</p><br><p>下面是有关橘子灌木丛在自然界中的生成</p><img src="/img/橘子灌木丛的生成.png" srcset="/img/loading_1.gif" lazyload alt="橘子灌木丛的生成"><p>ps：橘子灌木丛还可以放在花盆上喔</p><p>而且做装饰还是不错的</p><br><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>后续将会开发芦荻花群系</p><p>后续将会开发果园群系</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之柠檬树加入世界</title>
    <link href="/2024/12/02/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%9F%A0%E6%AA%AC%E6%A0%91%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/12/02/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%9F%A0%E6%AA%AC%E6%A0%91%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="柠檬树加入世界"><span style="color: cadetblue;">柠檬树加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="柠檬">柠檬</span></h2><p>总所周知柠檬长在柠檬树上</p><p>柠檬树</p><img src="/img/柠檬树.png" srcset="/img/loading_1.gif" lazyload alt><br><p>柠檬树会自然生成在游戏里的平原，森林和稀疏丛林群系中</p><br><p>下面是一些有关柠檬相关物品的展示</p><img src="/img/柠檬树物品展示.png" srcset="/img/loading_1.gif" lazyload alt="柠檬树物品展示"><br><p>玩家每食用一个柠檬会恢复1点饥饿值和1点饱食度</p><br><p>下面是有关柠檬的物品在物品栏中的展示</p><img src="/img/柠檬相关.png" srcset="/img/loading_1.gif" lazyload alt="柠檬相关"><p>ps：挂在树上的柠檬果实是可以通过精准采集附魔直接采摘下来的</p><p>而且采摘下来的柠檬果实可以悬挂在柠檬树叶下</p><br><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>后续将会开发橘子灌木丛</p><p>后续将会开发果园群系</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之关于如何生成挂在树上的果子</title>
    <link href="/2024/11/30/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%8C%82%E5%9C%A8%E6%A0%91%E4%B8%8A%E7%9A%84%E6%9E%9C%E5%AD%90/"/>
    <url>/2024/11/30/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%8C%82%E5%9C%A8%E6%A0%91%E4%B8%8A%E7%9A%84%E6%9E%9C%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="如何生成挂在树上的果子"><span style="color: cadetblue;">如何生成挂在树上的果子</span></span></h1><hr><p></p><h2 style="color: #b7a0e0"><span id="前言">前言</span></h2><p>在我的世界中有一些树在生成的时候会附带例如藤蔓，可可果，蜂巢等一起生成</p><img src="/img/藤蔓的生成.png" srcset="/img/loading_1.gif" lazyload alt><br><p>这是由 TreeDecorator 树木装饰器类来实现的。</p><p>树木装饰器可以为树木添加额外的块状物，如藤蔓或蜂巢。</p><p align="center" style="color: hotpink;font-size: 20px"><strong>这不是教程，仅是笔记，如果当作教程来看则默认你会模组开发的基本物品添加和注册功能的实现</strong></p><br><h2 style="color: #b7a0e0"><span id="具体实现">具体实现</span></h2><h3 style="color: #b7a0e0"><span id="创建芒果果实">创建芒果果实</span></h3><p>下面以长在树上的芒果为例</p><p>首先需要创建一个芒果果实方块,该方块以 MangoBlock 类来实现其基本功能，并且复制于我先前所写的ModBlocks.MANGO_LEAVES_HARVESTED</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Block</span> <span class="hljs-variable">MANGO_BLOCK</span> <span class="hljs-operator">=</span> registerBlocks(<span class="hljs-string">&quot;mango_block&quot;</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">MangoBlock</span>(FabricBlockSettings.copyOf(ModBlocks.MANGO_LEAVES_HARVESTED)<br>                    .nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));<br></code></pre></td></tr></table></figure><br><p>然后创建 MangoBlock 类并继承 PlantBlock 类，在该类里面实现芒果果实基本的放置前提条件</p><p>在该类中创建 VoxelShape SHAPE 字段用于创建芒果的模型体积大小</p><p>并使用 Stream.of(...) 来创建该形状的几个组成部分，并通过 reduce 方法来组合它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">VoxelShape</span> <span class="hljs-variable">SHAPE</span> <span class="hljs-operator">=</span> Stream.of(<br>            <span class="hljs-comment">//在这里面自行设计你想要的形状大小，例如</span><br>        Block.createCuboidShape(<span class="hljs-number">7</span>, -<span class="hljs-number">0.5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">12</span>)<br>    ).reduce((v1, v2) -&gt; VoxelShapes.combineAndSimplify(v1, v2, BooleanBiFunction.OR)).get();<br></code></pre></td></tr></table></figure><br><p>接下来创建 MangoBlock 类构造函数并接受类型为 Settings 的参数，在方法内调用父类的构造函数，传入 settings 参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">MangoBlock</span><span class="hljs-params">(Settings settings)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(settings);<br>    &#125;<br></code></pre></td></tr></table></figure><br><p>接下来分别重写 onUse，canPlaceAt，getOutlineShape，getCollisionShape，getPlacementState，getStateForNeighborUpdate和canPathfindThrough方法</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ActionResult <span class="hljs-title function_">onUse</span><span class="hljs-params">(BlockState state, World world, BlockPos pos, PlayerEntity player, Hand hand, BlockHitResult hit)</span><br>    &#123;<br>        <span class="hljs-comment">// 掉落一个指定的果子</span><br>        MangoBlock.dropStack(world, pos, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemStack</span>(ModItems.MANGO, <span class="hljs-number">1</span>));<br>        world.playSound(player, pos, SoundEvents.BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES, SoundCategory.BLOCKS, <span class="hljs-number">1.0F</span>, <span class="hljs-number">1.0F</span>);<br>        <span class="hljs-comment">// 移除方块</span><br>        world.removeBlock(pos, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> ActionResult.SUCCESS;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面方法是当玩家右键点击芒果果实时会掉落一个芒果</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPlaceAt</span><span class="hljs-params">(BlockState state, WorldView world, BlockPos pos)</span><br>    &#123;<br>        <span class="hljs-type">BlockState</span> <span class="hljs-variable">blockState</span> <span class="hljs-operator">=</span> world.getBlockState(pos.up(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">BlockState</span> <span class="hljs-variable">blockStateBelow</span> <span class="hljs-operator">=</span> world.getBlockState(pos.down());<br>        <span class="hljs-type">BlockState</span> <span class="hljs-variable">blockStateAbove</span> <span class="hljs-operator">=</span> world.getBlockState(pos.up(<span class="hljs-number">1</span>)); <span class="hljs-comment">//目标方块上方方块不是空气</span><br><br>        <span class="hljs-keyword">return</span> blockState.isOf(ModBlocks.MANGO_LEAVES)<br>                &amp;&amp; blockStateBelow.isAir()<br>                &amp;&amp; !blockStateAbove.isAir(); <span class="hljs-comment">//确保上方一格不是空气</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>上面代码是芒果果实放置的条件，通过检测当放置方块的上方为 ModBlocks.MANGO_LEAVES 且下方一格为空气和上方一格不为空气是才能放置芒果果实</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> VoxelShape <span class="hljs-title function_">getOutlineShape</span><span class="hljs-params">(BlockState state, BlockView world, BlockPos pos, ShapeContext context)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> SHAPE; <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> VoxelShape <span class="hljs-title function_">getCollisionShape</span><span class="hljs-params">(BlockState state, BlockView world, BlockPos pos, ShapeContext context)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> SHAPE; <br>    &#125;<br></code></pre></td></tr></table></figure><p>重写上面两个方法来实现芒果果实的形状和碰撞箱体积，其中 SHAPE 传入的为上面自己设计的方块形状</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">public</span> BlockState <span class="hljs-title function_">getPlacementState</span><span class="hljs-params">(ItemPlacementContext ctx)</span><br>    &#123;<br>        <span class="hljs-type">BlockState</span> <span class="hljs-variable">blockState</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDefaultState();<br>        <span class="hljs-type">World</span> <span class="hljs-variable">worldView</span> <span class="hljs-operator">=</span> ctx.getWorld();<br>        <span class="hljs-type">BlockPos</span> <span class="hljs-variable">blockPos</span> <span class="hljs-operator">=</span> ctx.getBlockPos();<br>        <span class="hljs-comment">// 仅检查是否可以放置</span><br>        <span class="hljs-keyword">if</span> (blockState.canPlaceAt(worldView, blockPos)) <br>        &#123;<br>            <span class="hljs-keyword">return</span> blockState;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>上面代码用于检查芒果果实是否可以放置，若无法放置则返回空</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BlockState <span class="hljs-title function_">getStateForNeighborUpdate</span><span class="hljs-params">(BlockState state, Direction direction, BlockState neighborState, WorldAccess world, BlockPos pos, BlockPos neighborPos)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (direction == Direction.UP &amp;&amp; !state.canPlaceAt(world, pos))<br>        &#123;<br>            <span class="hljs-keyword">return</span> Blocks.AIR.getDefaultState();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getStateForNeighborUpdate(state, direction, neighborState, world, pos, neighborPos);<br>    &#125;<br></code></pre></td></tr></table></figure><p>判断芒果果实上方是否为空气，如果是空气则移除芒果果实</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canPathfindThrough</span><span class="hljs-params">(BlockState state, BlockView world, BlockPos pos, NavigationType type)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>默认如何实体无法穿过该方块</p><br><h3 style="color: #b7a0e0"><span id="创建树木装饰器">创建树木装饰器</span></h3><p>首先创建 ModTreeDecoratorType 类来记录你有哪些树木装饰器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">ModTreeDecoratorType</span>&lt;P <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TreeDecorator</span>&gt;(Codec&lt;P&gt; codec)<br>&#123;<br>    <span class="hljs-comment">//声明自定义植物装饰生成器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> TreeDecoratorType&lt;MangoTreeDecorator&gt; MANGO_TREE_DECORATOR_TYPE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeDecoratorType</span>&lt;&gt;(MangoTreeDecorator.CODEC);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modTreeDecoratorTypeRegistry</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-comment">// 使用命名空间和路径创建Identifier并注册植物装饰生成器</span><br>        Registry.register(Registries.TREE_DECORATOR_TYPE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Identifier</span>(<span class="hljs-string">&quot;test-mod&quot;</span>, <span class="hljs-string">&quot;mango_tree_decorator_type&quot;</span>), MANGO_TREE_DECORATOR_TYPE);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>然后在模组主类中的初始化方法中调用 modTreeDecoratorTypeRegistry 方法</p><img src="/img/调用 modTreeDecoratorTypeRegistry.png" srcset="/img/loading_1.gif" lazyload alt><br><p>再创建一个 MangoTreeDecorator 芒果树装饰器（名字可以随便取），它继承于 TreeDecorator </p><p>在该类里定义 Codec，用于序列化和反序列化 MangoTreeDecorator 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Codec&lt;MangoTreeDecorator&gt; CODEC = RecordCodecBuilder.create(instance -&gt;<br>        instance.group(<br>                Codec.FLOAT.fieldOf(<span class="hljs-string">&quot;probability&quot;</span>).forGetter(decorator -&gt; decorator.probability)<br>        ).apply(instance, MangoTreeDecorator::<span class="hljs-keyword">new</span>)<br>);<br></code></pre></td></tr></table></figure><br><p>定义 probability 属性并在构造函数中接受该属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> probability;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MangoTreeDecorator</span><span class="hljs-params">(<span class="hljs-type">float</span> probability)</span><br>&#123;<br>    <span class="hljs-built_in">this</span>.probability = probability;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>接着重写 getType 方法并返回返回在 ModTreeDecoratorType 类中定义的自定义的 mango 树装饰器类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> TreeDecoratorType&lt;?&gt; getType()<br>    &#123;<br>        <span class="hljs-keyword">return</span> ModTreeDecoratorType.MANGO_TREE_DECORATOR_TYPE;<br>    &#125;<br></code></pre></td></tr></table></figure><br><p>然后重写 generate 用来实现芒果树装饰器的具体实现效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generate</span><span class="hljs-params">(Generator generator)</span><br>    &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> generator.getRandom();<br>        <span class="hljs-keyword">if</span> (random.nextFloat() &gt;= <span class="hljs-built_in">this</span>.probability)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        ObjectArrayList&lt;BlockPos&gt; list = generator.getLeavesPositions();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> list.get(<span class="hljs-number">0</span>).getY(); <span class="hljs-comment">// 获取第一个叶子块的 Y 值</span><br><br>        list.stream().filter(pos -&gt; Math.abs(pos.getY() - i) &lt;= <span class="hljs-number">1</span>).forEach(pos -&gt;<br>        &#123;<br>            <span class="hljs-keyword">for</span> (Direction direction : Direction.Type.HORIZONTAL)<br>            &#123;<br>                <span class="hljs-type">Direction</span> <span class="hljs-variable">oppositeDirection</span> <span class="hljs-operator">=</span> direction.getOpposite();<br>                <span class="hljs-type">BlockPos</span> <span class="hljs-variable">blockPos</span> <span class="hljs-operator">=</span> pos.add(oppositeDirection.getOffsetX(), <span class="hljs-number">0</span>, oppositeDirection.getOffsetZ());<br><br>                <span class="hljs-comment">// 检查上方是否是指定的树叶</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">isAboveLeaves</span> <span class="hljs-operator">=</span> generator.getWorld().testBlockState(pos.up(), state -&gt; state.isOf(ModBlocks.MANGO_LEAVES));<br>                <span class="hljs-comment">//检查下方的方块是否为空气</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">isBelowAir</span> <span class="hljs-operator">=</span> generator.getWorld().testBlockState(pos.down(), AbstractBlock.AbstractBlockState::isAir);<br><br>                <span class="hljs-comment">//检查生成条件</span><br>                <span class="hljs-keyword">if</span> (!(random.nextFloat() &lt;= <span class="hljs-number">0.25f</span>) || !generator.isAir(blockPos) || !isAboveLeaves || !isBelowAir)<br>                &#123;<br>                    <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//如果不满足条件则跳过</span><br>                &#125;<br>                generator.replace(blockPos, ModBlocks.MANGO_BLOCK.getDefaultState());<br>            &#125;<br>        &#125;);<br>    &#125;<br></code></pre></td></tr></table></figure><br><p>做完上面步骤之后就可以在树木生成时创建 MangoTreeDecorator 实例来实现果子生成的效果了</p><h3 style="color: #b7a0e0"><span id="在树生成时创建-mangotreedecorator-示例">在树生成时创建 MangoTreeDecorator 示例</span></h3><img src="/img/调用 MangoTreeDecorator.png" srcset="/img/loading_1.gif" lazyload alt><p>上面通过创建一个 MangoTreeDecorator(0.75f) 的实例并作为装饰器添加到树的特征配置中</p><p>原版中还有其他很多的树装饰器可以用，也能根据设定的概率和逻辑添加额外的装饰效果</p><br><h2 style="color: #b7a0e0"><span id="总结">总结</span></h2><p>树上长果子的效果就是通过树木装饰器来实现。</p><p>可以通过创建各种不同的树木装饰器来实现果子，藤蔓等伴随树木生成而生成的效果</p><p align="center" style="color: hotpink;font-size: 20px"><strong>以上代码用于 Fabric-1.20 版本模组开发</strong></p><p align="center" style="color: hotpink;font-size: 20px"><strong>仅供参考，若想摘抄请在下方留言</strong></p><hr><hr><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之芒果树加入世界</title>
    <link href="/2024/11/29/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E8%8A%92%E6%9E%9C%E6%A0%91%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/11/29/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E8%8A%92%E6%9E%9C%E6%A0%91%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="芒果树加入世界"><span style="color: cadetblue;">芒果树加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="芒果">芒果</span></h2><p>芒果树上长芒果</p><p>芒果树</p><img src="/img/芒果树.png" srcset="/img/loading_1.gif" lazyload alt><br><p>芒果树会自然生成在游戏里的繁花森林，森林，草甸和稀疏丛林群系中</p><br><p>下面是一些有关芒果相关物品的展示</p><img src="/img/芒果树物品展示.png" srcset="/img/loading_1.gif" lazyload alt="芒果树物品展示"><br><p>玩家每食用一个芒果会恢复4点饥饿值和2点饱食度</p><br><p>下面是有关芒果的物品在物品栏中的展示</p><img src="/img/芒果相关.png" srcset="/img/loading_1.gif" lazyload alt="芒果相关"><p>ps：挂在树上的芒果果实是可以通过精准采集附魔直接采摘下来的</p><p>而且采摘下来的芒果果实可以悬挂在芒果树叶下</p><br><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>后续将会开发柠檬树</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之堇瓜树加入世界</title>
    <link href="/2024/11/27/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E5%A0%87%E7%93%9C%E6%A0%91%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/11/27/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E5%A0%87%E7%93%9C%E6%A0%91%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="堇瓜树加入世界"><span style="color: cadetblue;">堇瓜树加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="堇瓜">堇瓜</span></h2><p>灵感来源于原神里的堇瓜</p><p>堇瓜是长在堇瓜树上的果子</p><p>堇瓜树</p><img src="/img/堇瓜树.png" srcset="/img/loading_1.gif" lazyload alt><br><p>堇瓜树会自然生成在游戏里的繁花森林，森林，草甸，向日葵平原和粉蝶花田群系中</p><br><p>下面是一些有关堇瓜相关物品的展示</p><img src="/img/堇瓜树物品展示.png" srcset="/img/loading_1.gif" lazyload alt="堇瓜树物品展示"><br><p>玩家每食用一个堇瓜会恢复2点饥饿值和2点饱食度</p><br><p>下面是有关堇瓜的物品在物品栏中的展示</p><img src="/img/堇瓜相关.png" srcset="/img/loading_1.gif" lazyload alt="堇瓜相关"><p>ps：挂在树上的堇瓜果实是可以通过精准采集附魔直接采摘下来的</p><p>而且采摘下来的堇瓜果实可以悬挂在堇瓜树叶下</p><br><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>后续将会开发芒果树</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之落日果树加入世界</title>
    <link href="/2024/11/25/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E8%90%BD%E6%97%A5%E6%9E%9C%E6%A0%91%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/11/25/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E8%90%BD%E6%97%A5%E6%9E%9C%E6%A0%91%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="落日果树加入世界"><span style="color: cadetblue;">落日果树加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="落日果">落日果</span></h2><p>灵感来源于原神里的落日果</p><p>落日果是长在落日果树上的果子</p><p>落日果树</p><img src="/img/落日果树.png" srcset="/img/loading_1.gif" lazyload alt><br><p>落日果树会自然生成在游戏里的平原和森林群系中</p><br><p>下面是一些有关落日果相关物品的展示</p><img src="/img/落日果树物品展示.png" srcset="/img/loading_1.gif" lazyload alt="落日果树物品展示"><br><p>玩家每食用一个落日果会恢复2点饥饿值和2点饱食度</p><br><p>下面是有关落日果的物品在物品栏中的展示</p><img src="/img/落日果相关.png" srcset="/img/loading_1.gif" lazyload alt="落日果相关"><p>ps：挂在树上的落日果果实是可以通过精准采集附魔直接采摘下来的</p><p>而且采摘下来的落日果果实可以悬挂在落日果树叶下，对于建筑党来说看来是一种不错的装饰物呢</p><br><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>后续将会开发堇瓜树</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之蓝莓和虾加入世界</title>
    <link href="/2024/11/16/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E8%93%9D%E8%8E%93%E5%92%8C%E8%99%BE%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/11/16/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E8%93%9D%E8%8E%93%E5%92%8C%E8%99%BE%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="蓝莓和虾加入世界"><span style="color: cadetblue;">蓝莓和虾加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="蓝莓">蓝莓</span></h2><p>蓝莓是蓝莓灌木丛生长出的一种果子</p><p>蓝莓</p><img src="/img/蓝莓.png" srcset="/img/loading_1.gif" lazyload alt><br><p>蓝莓灌木丛会自然生成在游戏里的繁花森林，平原，森林，桦树林，樱花林和粉蝶花田群系中</p><img src="/img/蓝莓灌木丛的生成.png" srcset="/img/loading_1.gif" lazyload alt="蓝莓灌木丛的生成"><br><p>每个蓝莓会给玩家恢复2点饥饿值和1点饱食度</p><br><h2 style="color: #b7a0e0"><span id="虾和烤虾仁">虾和烤虾仁</span></h2><p>现在模组里可以吃虾仁了！</p><p>虾和烤虾仁</p><img src="/img/蓝莓和虾.png" srcset="/img/loading_1.gif" lazyload alt><br><br><p>虾可以通过钓鱼获得，烤虾仁可以通过烤制虾或使用两颗绿宝石和四个虾与渔夫交易获得</p><img src="/img/渔夫交易烤虾仁.png" srcset="/img/loading_1.gif" lazyload alt="渔夫交易烤虾仁"><br><p>每个虾会给玩家恢复3点饥饿值和2点饱食度</p><p>每个烤虾仁会给玩家恢复6点饥饿值和5点饱食度</p><br><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>后续也可能会出有关蓝莓和虾的相关制作食品</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之银光花加入世界</title>
    <link href="/2024/11/16/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%93%B6%E5%85%89%E8%8A%B1%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/11/16/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%93%B6%E5%85%89%E8%8A%B1%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="银光花加入世界"><span style="color: cadetblue;">银光花加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="银光花">银光花</span></h2><p>灵感来自于原神中的小灯草</p><p>灵感来源</p><img src="/img/小灯草.png" srcset="/img/loading_1.gif" lazyload alt><br><p>银光花会自然生成在 繁花森林，郁金樱花林和黑森林群系中</p><img src="/img/银光花的生成.png" srcset="/img/loading_1.gif" lazyload alt="银光花的生成"><br><p>在游戏中银光花会发出微光照亮周围环境</p><p>是一种非常不错的装饰性植物呢</p><br><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之粉蝶花与粉玫瑰加入世界</title>
    <link href="/2024/11/13/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E7%B2%89%E8%9D%B6%E8%8A%B1%E4%B8%8E%E7%B2%89%E7%8E%AB%E7%91%B0%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/11/13/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E7%B2%89%E8%9D%B6%E8%8A%B1%E4%B8%8E%E7%B2%89%E7%8E%AB%E7%91%B0%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="粉蝶花与粉玫瑰加入世界"><span style="color: cadetblue;">粉蝶花与粉玫瑰加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="粉蝶花">粉蝶花</span></h2><p>灵感来自于《葬送的芙莉莲》中苍月花，也是动漫中苍月花的现实世界原型</p><p>灵感来源</p><img src="/img/芙莉莲.jpg" srcset="/img/loading_1.gif" lazyload alt><br><img src="/img/苍月草.jpg" srcset="/img/loading_1.gif" lazyload alt="苍月草"><br><img src="/img/苍月草1.jpg" srcset="/img/loading_1.gif" lazyload alt="苍月草"><br><img src="/img/苍月草2.jpg" srcset="/img/loading_1.gif" lazyload alt="苍月草"><br><p>粉蝶花</p><img src="/img/粉蝶花与其变种.png" srcset="/img/loading_1.gif" lazyload alt="粉蝶花与其变种"><br><p>在游戏里的粉蝶花田</p><img src="/img/粉蝶花田.png" srcset="/img/loading_1.gif" lazyload alt="粉蝶花田"><br><img src="/img/粉蝶花田1.png" srcset="/img/loading_1.gif" lazyload alt="粉蝶花田"><br><img src="/img/粉蝶花田2.png" srcset="/img/loading_1.gif" lazyload alt="粉蝶花田"><br><p>要是幸运的话找到花田还是非常美丽的</p><hr><h2 style="color: #b7a0e0"><span id="粉玫瑰">粉玫瑰</span></h2><p>粉玫瑰是玫瑰的一个变种</p><p>在游戏中玩家会遇到玫瑰花田群系，粉玫瑰就在其中</p><br><p>在游戏里的玫瑰花田</p><img src="/img/玫瑰花田.png" srcset="/img/loading_1.gif" lazyload alt="玫瑰花田"><br><p>而且粉玫瑰会冒爱心喔</p><img src="/img/粉玫瑰.png" srcset="/img/loading_1.gif" lazyload alt="粉玫瑰"><br><p>今天又是充实的一天</p><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p><p>会发光的银光花</p><p>更远大的目标是将更多一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之枫树正式加入世界</title>
    <link href="/2024/11/10/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%9E%AB%E6%A0%91%E6%AD%A3%E5%BC%8F%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/11/10/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%9E%AB%E6%A0%91%E6%AD%A3%E5%BC%8F%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="枫树加入世界"><span style="color: cadetblue;">枫树加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="枫树">枫树</span></h2><p>枫树是该模组独创的一个树种</p><p>经常会与原始桦树林群系接壤生成</p><p>树形高大，在树下还会有枫叶飘落</p><img src="/img/枫树群系.png" srcset="/img/loading_1.gif" lazyload alt="枫树群系"><br><img src="/img/枫树林.png" srcset="/img/loading_1.gif" lazyload alt="枫树群系"><img src="/img/枫树落叶效果.png" srcset="/img/loading_1.gif" lazyload alt="枫树群系"><p>枫叶飘落效果</p><br><h3 style="color: #b7a0e0"><span id="枫树的衍生物品">枫树的衍生物品</span></h3><p>下面是一些枫木类的物品</p><img src="/img/枫树与其制作品.png" srcset="/img/loading_1.gif" lazyload alt="枫树与其制作品"><br><h3 style="color: #b7a0e0"><span id="衍生物品展示">衍生物品展示</span></h3><p>下面是一些展示</p><img src="/img/枫树展示1.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/枫树展示2.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/枫树展示3.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/枫树展示4.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/枫树展示5.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><h3 style="color: #b7a0e0"><span id="郁金樱木船与箱船">郁金樱木船与箱船</span></h3><img src="/img/枫树展示6.png" srcset="/img/loading_1.gif" lazyload alt="郁金樱木船与箱船"><br><p align="center" style="color: hotpink;font-size: 20px"><strong>上面就是有关枫树的一些描述</strong></p><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发银杏树</p>  <p>更远大的目标是将原神里的一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之郁金樱加入世界</title>
    <link href="/2024/11/04/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%83%81%E9%87%91%E6%A8%B1%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/"/>
    <url>/2024/11/04/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%83%81%E9%87%91%E6%A8%B1%E5%8A%A0%E5%85%A5%E4%B8%96%E7%95%8C/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="郁金樱加入世界"><span style="color: cadetblue;">郁金樱加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="郁金樱">郁金樱</span></h2><p>作为樱花树的一个变种</p><p>主要生成在樱花群系，或独立生成在一个郁金樱群系</p><p>有着何樱花树差不多的外形</p><img src="/img/郁金樱的生成.png" srcset="/img/loading_1.gif" lazyload alt="郁金樱的生成"><p>凑近看了还会有与樱花树一样的落叶效果</p><br><h3 style="color: #b7a0e0"><span id="郁金樱的衍生物品">郁金樱的衍生物品</span></h3><p>下面是一些郁金樱类的物品</p><img src="/img/郁金樱与其制作品.png" srcset="/img/loading_1.gif" lazyload alt="郁金樱的衍生物品"><br><h3 style="color: #b7a0e0"><span id="衍生物品展示">衍生物品展示</span></h3><p>下面是一些展示</p><img src="/img/郁金樱展示1.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/郁金樱展示2.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/郁金樱展示3.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/郁金樱展示4.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/郁金樱展示5.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><h3 style="color: #b7a0e0"><span id="郁金樱木船与箱船">郁金樱木船与箱船</span></h3><img src="/img/郁金樱船.png" srcset="/img/loading_1.gif" lazyload alt="郁金樱木船与箱船"><br><p align="center" style="color: hotpink;font-size: 20px"><strong>上面就是有关郁金樱的一些描述</strong></p><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发一种枫树，银杏树</p>  <p>更远大的目标是将原神里的一些植物加到模组里去</p><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之更好看的金丝楠树</title>
    <link href="/2024/11/01/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%9B%B4%E5%A5%BD%E7%9C%8B%E7%9A%84%E9%87%91%E4%B8%9D%E6%A5%A0%E6%A0%91/"/>
    <url>/2024/11/01/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%9B%B4%E5%A5%BD%E7%9C%8B%E7%9A%84%E9%87%91%E4%B8%9D%E6%A5%A0%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="关于金丝楠树的更新"><span style="color: cadetblue;">关于金丝楠树的更新</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="修改">修改</span></h2><h3 style="color: #b7a0e0"><span id="树干与树叶">树干与树叶</span></h3><p>本次修改将金丝楠树干修改成四格方块大小树干，这样看起来不会很突兀了</p><p>并且添加了树杈分枝和更好看的树叶</p><p>还有藤蔓作为装饰</p><p>主要生成还是在雨林群系</p><img src="/img/金丝楠更新.png" srcset="/img/loading_1.gif" lazyload alt="金丝楠树的生成"><br><p>生长在热带雨林里还是挺好看的</p><img src="/img/金丝楠生成.png" srcset="/img/loading_1.gif" lazyload alt="金丝楠"><br><p>除此之外其他物品并未作修改</p><hr><blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p>  </blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之金丝楠树与其衍生物品的加入</title>
    <link href="/2024/10/29/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%87%91%E4%B8%9D%E6%A5%A0%E6%A0%91%E4%B8%8E%E5%85%B6%E8%A1%8D%E7%94%9F%E7%89%A9%E5%93%81%E7%9A%84%E5%8A%A0%E5%85%A5/"/>
    <url>/2024/10/29/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E9%87%91%E4%B8%9D%E6%A5%A0%E6%A0%91%E4%B8%8E%E5%85%B6%E8%A1%8D%E7%94%9F%E7%89%A9%E5%93%81%E7%9A%84%E5%8A%A0%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="金丝楠树加入世界"><span style="color: cadetblue;">金丝楠树加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="金丝楠树">金丝楠树</span></h2><p>一种很粗大的树木</p><p>主要生成在雨林群系</p><p>是一种树干为3*3大小的高大乔木</p><img src="/img/金丝楠树的生成.png" srcset="/img/loading_1.gif" lazyload alt="金丝楠树的生成"><p>长得不是很好看，因为树木生成的函数我还没研究好</p><br><h3 style="color: #b7a0e0"><span id="金丝楠树的衍生物品">金丝楠树的衍生物品</span></h3><p>下面是一些金丝楠类的物品</p><img src="/img/金丝楠木与其制作品.png" srcset="/img/loading_1.gif" lazyload alt="金丝楠树的衍生物品"><br><h3 style="color: #b7a0e0"><span id="衍生物品展示">衍生物品展示</span></h3><p>下面是一些展示</p><img src="/img/金丝楠展示1.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/金丝楠展示2.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/金丝楠展示3.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><img src="/img/金丝楠展示4.png" srcset="/img/loading_1.gif" lazyload alt="物品展示"><br><h3 style="color: #b7a0e0"><span id="还有金丝楠木船与箱船哟">还有金丝楠木船与箱船哟</span></h3><img src="/img/金丝楠木船与箱船.png" srcset="/img/loading_1.gif" lazyload alt="金丝楠木船与箱船"><br><p align="center" style="color: hotpink;font-size: 20px"><strong>有关金丝楠木的一些描述就这么多啦</strong></p><hr><h2 style="color: #b7a0e0"><span id="预告">预告</span></h2>  <p>后面将会开发一个樱花树的变种</p>  <p>郁金樱</p><blockquote>  <p style="color: #bbbbee">“风不怜，雨不惜，残荷败叶秋叙凄。云不离，雾不散，细雨清风春忆漫。——云梦泽”</p></blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『模组开发日记』之暗晶钻套装与工具的加入</title>
    <link href="/2024/10/21/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%9A%97%E6%99%B6%E9%92%BB%E5%A5%97%E8%A3%85%E4%B8%8E%E5%B7%A5%E5%85%B7%E7%9A%84%E5%8A%A0%E5%85%A5/"/>
    <url>/2024/10/21/%E3%80%8E%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0%E3%80%8F%E4%B9%8B%E6%9A%97%E6%99%B6%E9%92%BB%E5%A5%97%E8%A3%85%E4%B8%8E%E5%B7%A5%E5%85%B7%E7%9A%84%E5%8A%A0%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="暗晶钻装备正式加入世界"><span style="color: cadetblue;">暗晶钻装备正式加入世界</span></span></h1><hr><h2 style="color: #b7a0e0"><span id="引言">引言</span></h2>  <p>因为我是模组开发一半才开始着手开发个人博客，</p><p>所有没有从一开始就记录自己的模组开发过程，</p><p>不过从现在开始就可以正式记录啦</p><br><p align="center" style="color: #dd8888">需要提到一点的是暗晶钻的来源</p><h2 style="color: #b7a0e0"><span id="关于暗晶钻">关于暗晶钻</span></h2><br><p>暗晶钻的合成</p><img src="/img/暗晶钻合成.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻的合成"><p>暗晶钻是由一个暗晶碎片加上四个钻石合成的来</p><br><h3 style="color: #b7a0e0"><span id="关于暗晶碎片">关于暗晶碎片</span></h3><br><p>暗晶碎片</p><img src="/img/暗晶碎片.png" srcset="/img/loading_1.gif" lazyload alt="暗晶碎片"><p>暗晶碎片是开采暗晶簇得来，这是在生存中唯一能得到暗晶碎片的方法</p><br><p>暗晶簇</p><img src="/img/暗晶簇.png" srcset="/img/loading_1.gif" lazyload alt="暗晶簇"><h4 style="color: #b7a0e0"><span id="暗晶簇的生成">暗晶簇的生成</span></h4><br><p>在主世界的紫水晶洞中，由于环境的不同，紫水晶簇在生长过程中会发生变质而生成一种奇怪又神秘的褪色水晶簇【暗晶簇】</p><br><p>暗晶簇在水晶洞中的状态</p><img src="/img/暗晶簇生成.png" srcset="/img/loading_1.gif" lazyload alt="暗晶簇在水晶洞中的状态"><p>玩家在探索矿洞过程中如果幸运的话可以在紫水晶洞中发现这种神秘的矿石</p><p>需要知道的是，这种矿物有且只会在紫水晶洞中生成，且它不会像紫水晶那样会在母岩上再重新长出来</p><p style="color: #735c0f">看来是一种很神秘的矿物呢</p><p>通过打破暗晶簇可以得到1-3块暗晶碎片</p><br><hr><p>通过上面的合成就可以得到暗晶钻啦</p><br><h2 style="color: #b7a0e0"><span id="暗晶钻装备">暗晶钻装备</span></h2><h3 style="color: #b7a0e0"><span id="合成">合成</span></h3><p>暗晶钻装备的合成和钻石装备合成一模一样</p><p align="center">如下所示</p><p>暗晶钻头盔的合成</p><img src="/img/暗晶钻头盔.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻头盔的合成"><p>暗晶钻头盔为玩家提供：+3护甲值，+3.5盔甲韧性，+2击退抗性</p><br><p>暗晶钻胸甲的合成</p><img src="/img/暗晶钻胸甲.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻胸甲的合成"><p>暗晶钻头盔为玩家提供：+8护甲值，+3.5盔甲韧性，+2击退抗性</p><br><p>暗晶钻裤腿的合成</p><img src="/img/暗晶钻裤腿.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻裤腿的合成"><p>暗晶钻头盔为玩家提供：+6护甲值，+3.5盔甲韧性，+2击退抗性</p><br><p>暗晶钻靴子的合成</p><img src="/img/暗晶钻靴子.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻靴子的合成"><p>暗晶钻头盔为玩家提供：+3护甲值，+3.5盔甲韧性，+2击退抗性</p><br><p>这样就可以得到暗晶钻四件套了</p><p style="color: #dd8888">集齐四件套穿身上会让玩家每15秒获得6颗心的伤害吸收效果</p><img src="/img/暗晶钻四件套.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻四件套效果"><hr><br><p align="center">下面是工具类用品的合成</p><p>暗晶钻剑的合成</p><img src="/img/暗晶钻剑.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻剑的合成"><p>在使用暗晶钻剑攻击生物时会有吸血效果，一般来说每攻击到一个生物会有吸血效果，为自身增加两点生命值，同时攻击多个生物恢复生命值数则按 2*受攻击生物数 来计算</p><br><p>具体代码实现效果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkCrystalDiamondSwordItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SwordItem</span><br>&#123;<br><br>    <span class="hljs-comment">// 增加冷却时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastHealTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 上次回复生命的时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">HEAL_COOLDOWN</span> <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>; <span class="hljs-comment">// 2秒冷却，单位是毫秒</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">enemyHitCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 记录击中的敌人数量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COOLDOWN_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">40</span>; <span class="hljs-comment">// 设置物品冷却时间，单位是tick（1秒=20tick）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DarkCrystalDiamondSwordItem</span><span class="hljs-params">(ToolMaterial toolMaterial, <span class="hljs-type">int</span> attackDamage, <span class="hljs-type">float</span> attackSpeed, Settings settings)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(toolMaterial, attackDamage, attackSpeed, settings);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">postHit</span><span class="hljs-params">(ItemStack stack, LivingEntity target, LivingEntity attacker)</span><br>    &#123;<br>        <span class="hljs-comment">//可以在if语句块里引用PlayerEntity user</span><br>        <span class="hljs-keyword">if</span> (attacker <span class="hljs-keyword">instanceof</span> PlayerEntity user)<br>        &#123;<br>            <span class="hljs-comment">//检查冷却时间</span><br>            <span class="hljs-keyword">if</span> (user.getItemCooldownManager().isCoolingDown(stack.getItem()))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//如果正在冷却，直接返回</span><br>            &#125;<br><br>            stack.damage(<span class="hljs-number">1</span>, attacker, e -&gt; e.sendEquipmentBreakStatus(EquipmentSlot.MAINHAND));<br>            enemyHitCount++; <span class="hljs-comment">//每次击中敌人时增加计数</span><br><br>            <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>            <span class="hljs-comment">//检查冷却时间</span><br>            <span class="hljs-keyword">if</span> (currentTime - lastHealTime &gt;= HEAL_COOLDOWN)<br>            &#123;<br>                healMultipleFromEnemies(attacker, enemyHitCount);<br>                lastHealTime = currentTime; <span class="hljs-comment">//更新最后一次回复生命的时间</span><br>                enemyHitCount = <span class="hljs-number">0</span>; <span class="hljs-comment">//重置敌人数量计数</span><br>            &#125;<br><br>            <span class="hljs-comment">//设置物品冷却(用物品冷却管理器来设置)</span><br>            user.getItemCooldownManager().set(stack.getItem(), COOLDOWN_TIME);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//用于实现多次攻击回复生命值的逻辑</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">healMultipleFromEnemies</span><span class="hljs-params">(LivingEntity attacker, <span class="hljs-type">int</span> enemyCount)</span><br>    &#123;<br>        <span class="hljs-comment">//每个敌人回复1点生命值</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">healAmount</span> <span class="hljs-operator">=</span> Math.min(enemyCount * <span class="hljs-number">2</span>, <span class="hljs-number">20</span> - attacker.getHealth()); <span class="hljs-comment">//确保不超过最大生命值</span><br>        attacker.heal(healAmount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>暗晶钻斧的合成</p><img src="/img/暗晶钻斧.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻斧的合成"><p>暗晶钻斧头每次使用可以砍伐目标木头上方所有的木头，并且在使用斧头攻击生物时会将生物打出重伤效果(冷却时间五秒钟)</p><br><p>具体代码实现效果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkCrystalDiamondAxeItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AxeItem</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COOLDOWN_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; <span class="hljs-comment">//冷却时间，单位是tick（1秒=20tick）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DarkCrystalDiamondAxeItem</span><span class="hljs-params">(ToolMaterial material, <span class="hljs-type">float</span> attackDamage, <span class="hljs-type">float</span> attackSpeed, Settings settings)</span> &#123;<br>        <span class="hljs-built_in">super</span>(material, attackDamage, attackSpeed, settings);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">postMine</span><span class="hljs-params">(ItemStack stack, World world, BlockState state, BlockPos pos, LivingEntity miner)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!(miner <span class="hljs-keyword">instanceof</span> PlayerEntity player))<br>        &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//只有玩家可以使用</span><br>        &#125;<br><br>        <span class="hljs-comment">//检查当前方块是否是木头</span><br>        <span class="hljs-keyword">if</span> (state.isIn(BlockTags.OVERWORLD_NATURAL_LOGS))<br>        &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">brokenBlocks</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录破坏的木头块数</span><br>            <span class="hljs-keyword">if</span> (!world.isClient)<br>            &#123;<br>                <span class="hljs-comment">//服务器端处理</span><br>                showWoodInVertical(world, player);<br><br>                <span class="hljs-comment">//打破当前的木头</span><br>                brokenBlocks++;<br>                world.breakBlock(pos, <span class="hljs-literal">true</span>, player);<br>                <span class="hljs-comment">//检查并破坏上方的木头</span><br>                brokenBlocks += checkAndBreakAbove(world, pos.up(), state, player);<br><br>                <span class="hljs-comment">//减少斧头耐久</span><br>                stack.damage(brokenBlocks, player, (p) -&gt; p.sendToolBreakStatus(Hand.MAIN_HAND));<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//如果不是木头，返回 false</span><br>    &#125;<br><br>    <span class="hljs-comment">//检查并破坏上方的木头</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">checkAndBreakAbove</span><span class="hljs-params">(World world, BlockPos pos, BlockState originalState, PlayerEntity player)</span><br>    &#123;<br>        <span class="hljs-type">BlockState</span> <span class="hljs-variable">aboveState</span> <span class="hljs-operator">=</span> world.getBlockState(pos);<br><br>        <span class="hljs-comment">//用来计数破坏了多少个方块</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">brokenCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (aboveState.isIn(BlockTags.OVERWORLD_NATURAL_LOGS) &amp;&amp; aboveState.equals(originalState)) &#123;<br>            <span class="hljs-comment">//破坏上方的木头</span><br>            world.breakBlock(pos, <span class="hljs-literal">true</span>, player);<br>            brokenCount++;<br><br>            <span class="hljs-comment">//递归检查上方的木头</span><br>            brokenCount += checkAndBreakAbove(world, pos.up(), originalState, player);<br>        &#125;<br>        <span class="hljs-keyword">return</span> brokenCount;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showWoodInVertical</span><span class="hljs-params">(World world, PlayerEntity player)</span><br>    &#123;<br>        <span class="hljs-type">BlockPos</span> <span class="hljs-variable">playerPos</span> <span class="hljs-operator">=</span> player.getBlockPos();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++)<br>        &#123;<br>            <span class="hljs-type">BlockPos</span> <span class="hljs-variable">checkPos</span> <span class="hljs-operator">=</span> playerPos.up(i);<br>            <span class="hljs-type">BlockState</span> <span class="hljs-variable">blockState</span> <span class="hljs-operator">=</span> world.getBlockState(checkPos); <span class="hljs-comment">//获取当前检查的方块状态</span><br>            <span class="hljs-keyword">if</span> (blockState.isIn(BlockTags.OVERWORLD_NATURAL_LOGS))<br>            &#123;<br>                world.playSound(<span class="hljs-literal">null</span>, checkPos, SoundEvents.BLOCK_WOOD_PLACE, SoundCategory.BLOCKS, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">postHit</span><span class="hljs-params">(ItemStack stack, LivingEntity target, LivingEntity attacker)</span><br>    &#123;<br>        <span class="hljs-comment">//可以在if语句块里引用PlayerEntity user</span><br>        <span class="hljs-keyword">if</span> (attacker <span class="hljs-keyword">instanceof</span> PlayerEntity user)<br>        &#123;<br>            <span class="hljs-comment">//检查冷却时间</span><br>            <span class="hljs-keyword">if</span> (user.getItemCooldownManager().isCoolingDown(stack.getItem()))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-comment">//扣除斧头耐久</span><br>            stack.damage(<span class="hljs-number">1</span>, attacker, e -&gt; e.sendEquipmentBreakStatus(EquipmentSlot.MAINHAND));<br><br>            <span class="hljs-comment">//用斧头打中人之后会给对方重伤效果</span><br>            target.addStatusEffect(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StatusEffectInstance</span>(ModStatusEffects.BADLY_WOUNDED, <span class="hljs-number">80</span>, <span class="hljs-number">0</span>)); <span class="hljs-comment">// 4秒中重伤</span><br><br>            <span class="hljs-comment">//这是使用后的冷却冷却</span><br>            user.getItemCooldownManager().set(stack.getItem(), COOLDOWN_TIME);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><br><p>暗晶钻镐的合成</p><img src="/img/暗晶钻镐.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻镐的合成"><p>暗晶钻镐使用时右键可以瞬间破坏3*3*3范围内的方块（冷却时间四秒钟）</p><br><p>具体代码实现效果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkCrystalDiamondPickaxeItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MiningToolItem</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COOLDOWN_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>; <span class="hljs-comment">//冷却时间，单位是tick（1秒=20tick）</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DarkCrystalDiamondPickaxeItem</span><span class="hljs-params">(ToolMaterial material, <span class="hljs-type">int</span> attackDamage, <span class="hljs-type">float</span> attackSpeed, Item.Settings settings)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(attackDamage, attackSpeed, material, BlockTags.PICKAXE_MINEABLE, settings);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> TypedActionResult&lt;ItemStack&gt; <span class="hljs-title function_">use</span><span class="hljs-params">(World world, PlayerEntity user, Hand hand)</span><br>    &#123;<br>        <span class="hljs-type">ItemStack</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> user.getStackInHand(hand);<br><br>        <span class="hljs-comment">//检查玩家是否在创造模式（先检查再判断）</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isCreative</span> <span class="hljs-operator">=</span> user.isCreative();<br><br>        <span class="hljs-comment">//检查冷却状态（如果不在创造模式下）</span><br>        <span class="hljs-keyword">if</span> (!isCreative &amp;&amp; user.getItemCooldownManager().isCoolingDown(stack.getItem()))<br>        &#123;<br>            <span class="hljs-keyword">return</span> TypedActionResult.fail(stack);<br>        &#125;<br><br>        <span class="hljs-comment">//获取玩家当前瞄准的方块</span><br>        <span class="hljs-type">HitResult</span> <span class="hljs-variable">hitResult</span> <span class="hljs-operator">=</span> user.raycast(<span class="hljs-number">5.0</span>, <span class="hljs-number">1.0F</span>, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">//检查瞄准的方块类型</span><br>        <span class="hljs-keyword">if</span> (hitResult.getType() == HitResult.Type.BLOCK)<br>        &#123;<br>            <span class="hljs-type">BlockHitResult</span> <span class="hljs-variable">blockHitResult</span> <span class="hljs-operator">=</span> (BlockHitResult) hitResult;<br>            <span class="hljs-type">BlockPos</span> <span class="hljs-variable">targetedBlockPos</span> <span class="hljs-operator">=</span> blockHitResult.getBlockPos();<br>            <span class="hljs-type">BlockState</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> world.getBlockState(targetedBlockPos);<br><br>            <span class="hljs-comment">//检查方块是否可以被挖掘</span><br>            <span class="hljs-keyword">if</span> (!state.isAir() &amp;&amp; canMine(state))<br>            &#123;<br>                <span class="hljs-comment">//确保玩家可以破坏瞄准的位置</span><br>                <span class="hljs-keyword">if</span> (user.canModifyAt(world, targetedBlockPos))<br>                &#123;<br>                    <span class="hljs-comment">//挖掘 3x3x3 区域</span><br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; x &lt;= <span class="hljs-number">1</span>; x++)<br>                    &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; y &lt;= <span class="hljs-number">1</span>; y++)<br>                        &#123;<br>                            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>; z &lt;= <span class="hljs-number">1</span>; z++)<br>                            &#123;<br>                                <span class="hljs-type">BlockPos</span> <span class="hljs-variable">blockToBreak</span> <span class="hljs-operator">=</span> targetedBlockPos.add(x, y, z);<br>                                <span class="hljs-type">BlockState</span> <span class="hljs-variable">blockState</span> <span class="hljs-operator">=</span> world.getBlockState(blockToBreak);<br><br>                                <span class="hljs-comment">// 检查每个方块是否可以被挖掘</span><br>                                <span class="hljs-keyword">if</span> (!blockState.isAir() &amp;&amp; canMine(blockState))<br>                                &#123;<br>                                    <span class="hljs-comment">// 进行方块破坏，设置进度</span><br>                                    world.breakBlock(blockToBreak, <span class="hljs-literal">true</span>, user);<br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (!isCreative)<br>                    &#123;<br>                        <span class="hljs-comment">//播放音效</span><br>                        world.playSound(<span class="hljs-literal">null</span>, user.getX(), user.getY(), user.getZ(), SoundEvents.ITEM_AXE_STRIP, user.getSoundCategory(), <span class="hljs-number">1.0F</span>, <span class="hljs-number">1.0F</span>);<br><br>                        <span class="hljs-comment">//设置物品冷却（用物品冷却管理器来设置）</span><br>                        user.getItemCooldownManager().set(stack.getItem(), COOLDOWN_TIME);<br><br>                        <span class="hljs-comment">//消耗耐久，假设挖掘了 26 个方块</span><br>                        stack.damage(<span class="hljs-number">26</span>, user, (entity) -&gt; entity.sendToolBreakStatus(hand));<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> TypedActionResult.success(stack);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canMine</span><span class="hljs-params">(BlockState state)</span><br>    &#123;<br>        <span class="hljs-comment">// 检查方块是否可以被挖掘</span><br>        <span class="hljs-keyword">return</span> state.isIn(BlockTags.PICKAXE_MINEABLE); <span class="hljs-comment">// 请替换为实际可挖掘方块的检查条件</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>暗晶钻锄的合成</p><img src="/img/暗晶钻锄.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻锄的合成"><p>暗晶钻锄使用时可以一次性耕种3*3的农田</p><br><p>具体代码实现效果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DarkCrystalDiamondHoeItem</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HoeItem</span><br>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DarkCrystalDiamondHoeItem</span><span class="hljs-params">(ToolMaterial material, <span class="hljs-type">int</span> attackDamage, <span class="hljs-type">float</span> attackSpeed, Settings settings)</span><br>    &#123;<br>        <span class="hljs-built_in">super</span>(material, attackDamage, attackSpeed, settings);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ActionResult <span class="hljs-title function_">useOnBlock</span><span class="hljs-params">(ItemUsageContext context)</span> &#123;<br>        <span class="hljs-type">BlockPos</span> <span class="hljs-variable">blockPos</span> <span class="hljs-operator">=</span> context.getBlockPos();<br>        <span class="hljs-type">World</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> context.getWorld();<br>        <span class="hljs-type">PlayerEntity</span> <span class="hljs-variable">playerEntity</span> <span class="hljs-operator">=</span> context.getPlayer();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">startX</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">startZ</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tillCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> startX; x &lt;= <span class="hljs-number">1</span>; x++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> startZ; z &lt;= <span class="hljs-number">1</span>; z++)<br>            &#123;<br>                <span class="hljs-type">BlockPos</span> <span class="hljs-variable">currentPos</span> <span class="hljs-operator">=</span> blockPos.add(x, <span class="hljs-number">0</span>, z);<br>                <span class="hljs-type">BlockState</span> <span class="hljs-variable">currentState</span> <span class="hljs-operator">=</span> world.getBlockState(currentPos);<br>                Pair&lt;Predicate&lt;ItemUsageContext&gt;, Consumer&lt;ItemUsageContext&gt;&gt; pair = TILLING_ACTIONS.get(currentState.getBlock());<br><br>                <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    Predicate&lt;ItemUsageContext&gt; predicate = pair.getFirst();<br>                    Consumer&lt;ItemUsageContext&gt; consumer = pair.getSecond();<br><br>                    <span class="hljs-type">BlockHitResult</span> <span class="hljs-variable">hitResult</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockHitResult</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vec3d</span>(currentPos.getX(), currentPos.getY(), currentPos.getZ()), Direction.UP, currentPos, <span class="hljs-literal">false</span>);<br>                    <span class="hljs-type">ItemUsageContext</span> <span class="hljs-variable">newContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemUsageContext</span>(world,playerEntity, context.getHand(), context.getStack(), hitResult);<br><br>                    <span class="hljs-comment">// 在客户端上执行操作 如果是（!world.isClient）则在服务端执行操作</span><br>                    <span class="hljs-keyword">if</span> (world.isClient)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (predicate.test(newContext))<br>                        &#123;<br>                            <span class="hljs-comment">// 播放声音效果</span><br>                            world.playSound(playerEntity, currentPos, SoundEvents.ITEM_HOE_TILL, SoundCategory.BLOCKS, <span class="hljs-number">1.0f</span>, <span class="hljs-number">1.0f</span>);<br>                            consumer.accept(newContext); <span class="hljs-comment">//在客户端添加动作的效果</span><br>                            tillCount++;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">if</span> (predicate.test(newContext))<br>                        &#123;<br>                            consumer.accept(newContext);<br>                            tillCount++;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果成功耕作的方块数大于 0，处理耐久</span><br>        <span class="hljs-keyword">if</span> (tillCount &gt; <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (playerEntity != <span class="hljs-literal">null</span>)<br>            &#123;<br>                context.getStack().damage(<span class="hljs-number">9</span>, playerEntity, p -&gt; p.sendToolBreakStatus(context.getHand()));<br>            &#125;<br>            <span class="hljs-keyword">return</span> ActionResult.success(world.isClient);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ActionResult.PASS;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><p>暗晶钻铲的合成</p><img src="/img/暗晶钻铲.png" srcset="/img/loading_1.gif" lazyload alt="暗晶钻铲的合成"><p>暗晶钻铲暂无特殊功能</p><br><p align="center" style="color: hotpink;font-size: 20px"><strong>以上代码用于 Fabric-1.20 版本模组开发</strong></p><p align="center" style="color: hotpink;font-size: 20px"><strong>仅供参考，若想摘抄请在下方留言</strong></p><hr><hr><h2 style="color: #b7a0e0"><span id="总结">总结</span></h2>  <p>该套装开发进程已经完成，后续还会更新</p>  <blockquote>  <p style="color: #bbbbee">“一花一世界，一叶一菩提”</p>  </blockquote><hr><p>版权所有 © 2024 云梦泽<br>欢迎访问我的个人网站：<a href="https://hgt12.github.io/">https://hgt12.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>模组开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MC</tag>
      
      <tag>技术向</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于怎么将自定义js用hexo注入的方法加到自定义html中的一点理解</title>
    <link href="/2024/10/19/%E5%85%B3%E4%BA%8E%E6%80%8E%E4%B9%88%E5%B0%86%E8%87%AA%E5%AE%9A%E4%B9%89js%E7%94%A8hexo%E6%B3%A8%E5%85%A5%E7%9A%84%E6%96%B9%E6%B3%95%E5%8A%A0%E5%88%B0%E8%87%AA%E5%AE%9A%E4%B9%89html%E4%B8%AD%E7%9A%84a%C2%B8%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/"/>
    <url>/2024/10/19/%E5%85%B3%E4%BA%8E%E6%80%8E%E4%B9%88%E5%B0%86%E8%87%AA%E5%AE%9A%E4%B9%89js%E7%94%A8hexo%E6%B3%A8%E5%85%A5%E7%9A%84%E6%96%B9%E6%B3%95%E5%8A%A0%E5%88%B0%E8%87%AA%E5%AE%9A%E4%B9%89html%E4%B8%AD%E7%9A%84a%C2%B8%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 align="center"><span id="关于自定义html的相关配置">关于自定义html的相关配置</span></h1><br><h2 style="color: #b7a0e0"><span id="起因">起因</span></h2><p>今天尝试着创建一个自定义的html来搭建一个留言板页面并给这个页面设置特殊的雪花降落效果</p><h2 style="color: #b7a0e0"><span id="发现问题">发现问题</span></h2><p>但我在研究新建html文件和hexo注入的时候遇到无法将自己的js注入到自定义的html文件中的问题</p><img src="/img/hexo注入.png" srcset="/img/loading_1.gif" lazyload alt><h2 style="color: #b7a0e0"><span id="寻找解决方法">寻找解决方法</span></h2><p>找了好久的问题，又去翻阅了官方的API文档</p><p>但还是看的云里雾里的</p><p><strong>我看到他里面给的提示说是</strong></p><hr><p>default: 注入到每个页面（默认值</p><p> home: 只注入到主页（is_home() 为 true 的页面）</p><p> post: 只注入到文章页面（is_post() 为 true 的页面）</p><p> page: 只注入到独立页面（is_page() 为 true 的页面）</p><p> archive: 只注入到归档页面（is_archive() 为 true 的页面）</p><p> category: 只注入到分类页面（is_category() 为 true 的页面）</p><p> tag: 只注入到标签页面（is_tag() 为 true 的页面）</p><p> messages: 只注入到留言板页面（is_messages() 为 true 的页面）<br> 或是其他自定义 layout 名称，例如在Fluid 主题中 about 对应关于页、links 对应友联页</p><p></p><hr><p><strong>结果看完我更蒙了</strong></p><p>然后就是各种找解决方法</p><h2 style="color: #b7a0e0"><span id="出现头绪">出现头绪</span></h2><p>然后我在翻项目文件的时候在.ejs文件里发现了有关layout的代码</p><img src="/img/hexo注入1.png" srcset="/img/loading_1.gif" lazyload alt><img src="/img/hexo注入2.png" srcset="/img/loading_1.gif" lazyload alt><p>上面就是在about.ejs文件中的layout属性是和about页面里的设置是关联的</p><p>然后发现在layout文件夹下的文件是属于是布局文件</p><p><strong>而且有一些布局文件还没有这些属性，原来是有一些布局是不能拥有这个属性的</strong></p><p>我自己的理解是只有一些大的页面才会有这个属性，但小页面不会有，比如一下post文章页面就没有</p><h2 style="color: #b7a0e0"><span id="尝试解决">尝试解决</span></h2><p>知道问题出在那就很好解决了</p><p>先在layout文件夹下新建一个和自己新建的html相关联的.ejs文件（最好是同名的）</p><p>里面的内容可以先复制其他类似的文件来用</p><p><strong>需要注意的是，你复制用的哪些界面的布局，你自己自定义界面的布局也会和他一样</strong></p><img src="/img/hexo注入3.png" srcset="/img/loading_1.gif" lazyload alt><p>我这里就照搬了page.ejs文件</p><p><strong>要注意你上面的layout属于要改成你自己自定义的名称</strong></p><p>然后再到项目目录下新建scripts文件夹用于存放我们的hexo注入代码js文件</p><img src="/img/hexo注入4.png" srcset="/img/loading_1.gif" lazyload alt><p>然后再写一段你要注入到页面的js文件和要关联的layout属性加上去问题就完美解决了</p><img src="/img/hexo注入5.png" srcset="/img/loading_1.gif" lazyload alt><h2 style="color: #b7a0e0"><span id="后记">后记</span></h2><p>我的理解是这玩意在/layout路径下面某些文件（或者你自己新建的文件要自己写ejs）的 page.layout = "about" 里如果文件第一行是about，则下面填about会有js效果则表示注入成功</p><p>要注意的是你新建页面的布局你想自己设计的话要自己去该，源码中的page.ejs是属于默认布局来的了</p><br><p><strong>问题解决终于可以睡个好觉了</strong></p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自定义</tag>
      
      <tag>随笔</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="/2024/10/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/10/17/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>​<strong>关于云梦泽的个人博客开发</strong></p><p>简单介绍一下这个博客建立的初衷吧</p><p>由于我最近在做Minecraft的模组开发，就想着建一个个人博客来记录一下自己的模组开发过程，就当作是朋友圈来发了。</p><p>因为模组的大体框架已经搭好，后续我会更新一下模组开发的过程。</p><p><img src="/img/%E6%A8%A1%E7%BB%84%E5%BC%80%E5%8F%91%E6%88%AA%E5%9B%BE.png" srcset="/img/loading_1.gif" lazyload alt="部分代码截图"></p><p>不知不觉已经写了这么多的物品</p><p><img src="/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20241017112610.png" srcset="/img/loading_1.gif" lazyload alt="写了好多物品啊"></p><hr><hr><p>其实个人博客在一年前的暑假就打算自己开发了，只不过之前不太会这些，加上博客的搭建涉及到JSP，JS，CSS，等运用，那时候还不太熟练，最近也算是有这个模组开发当契机吧，试着自己做博客。</p><p>另外值得一提的是，本博客的开发运用的是<a href="https://hexo.io/">Hexo</a>所集成的生成和部署功能，这是很方便的，<strong>这可以让我在网页开发中省去很多时间来设计网页</strong>，但缺点是我不能很深入的了解网页开发的一些知识。但我相信在后续的博客搭建过程中肯定少不了我的自定义网页，届时我也会通过该博客的搭建和一些文章的发布来了解网页开发的更多知识。</p><p>关于该博客的主题使用的是<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>主题，在<a href="https://hexo.io/">Hexo</a>中可以找到，你如果也想搭建自己的个人博客不妨可以去试试运用<a href="https://hexo.io/">Hexo</a>来属于自己的个人博客，当然你如果不想用也可以纯手搓html来开发自己的博客网站。</p><p>关于<a href="https://hgt12.github.io/">云梦泽的个人博客</a>的一些其他功能，例如评论，友链等，云梦泽本人也在快马加鞭得学习中，虽然有一些数据库与前后端链接的基础，但实际运用起开开发还是对我来说太陌生了，以前也没有正真运用过，现在也是处于一个边学习边做的状态，大家可以好好期待一下我的后续开发。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>文章</tag>
      
      <tag>云梦泽</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
